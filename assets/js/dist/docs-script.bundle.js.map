{"version":3,"file":"docs-script.bundle.js","mappings":"mBAYA,MA0BA,EA1B6B,SAAiDA,EAAOC,GAEpF,IAAIC,EAAwD,KACxDC,EAAwD,KAE5D,OAAO,YAAyCC,GAC3CF,GACCC,GACHE,aAAaF,GAGdA,EAAkBG,YAAW,KAC5BN,EAAGO,MAAMC,KAAMJ,GACfD,EAAkB,OAChBF,KAEHD,EAAGO,MAAMC,KAAMJ,GAEfF,EAAkBI,YAAW,KAC5BJ,EAAkB,OAChBD,MC9BAQ,EAAY,SAA6BC,GAC9CA,EAAEC,iBAEF,IAAIC,EAAKF,EAAEG,OACX,MAAMC,EAAsBF,EAAGG,aAAa,uBAE5C,IAAIC,EAAgBF,EAAsBG,SAASH,EAAqB,IAAM,EAE9EE,GAAiB,EAEjBJ,EAAGM,aAAa,sBAAuBF,EAAcG,aAGhDC,EAAqC,EAAqBX,EAAW,KACrEY,EAAqC,EAAqBZ,EAAW,KAE3Ea,SAASC,iBAA8B,mCAAmCC,SAASC,GAAQA,EAAIC,iBAAiB,QAASN,KACzHE,SAASC,iBAA8B,mCAAmCC,SAASC,GAAQA,EAAIC,iBAAiB,QAASL,M","sources":["webpack://@cipscis/throttle-with-debounce/./src/throttle-with-debounce.ts","webpack://@cipscis/throttle-with-debounce/./docs/assets/js/src/docs-script.ts"],"sourcesContent":["/**\n * Create a version of fn that will only execute if it\n * hasn't been called successfully within the last delay ms,\n * and will also execute an additional time after it has\n * stopped being called if it was called more than once.\n *\n * This is useful for binding callbacks to events such as\n * scroll or resize.\n *\n * @param {Function} fn - A function to throttle\n * @param {number} delay - The duration to wait before the function can be called again (ms)\n */\nconst throttleWithDebounce = function<F extends (...args: any[]) => unknown> (fn: F, delay: number) {\n\t// Use ReturnType<typeof setTimeout> for support across ES and NodeJS environments\n\tlet throttleTimeout: ReturnType<typeof setTimeout> | null = null;\n\tlet debounceTimeout: ReturnType<typeof setTimeout> | null = null;\n\n\treturn function (this: ThisParameterType<F>, ...args: Parameters<F>): void {\n\t\tif (throttleTimeout) {\n\t\t\tif (debounceTimeout) {\n\t\t\t\tclearTimeout(debounceTimeout);\n\t\t\t}\n\n\t\t\tdebounceTimeout = setTimeout(() => {\n\t\t\t\tfn.apply(this, args);\n\t\t\t\tdebounceTimeout = null;\n\t\t\t}, delay);\n\t\t} else {\n\t\t\tfn.apply(this, args);\n\n\t\t\tthrottleTimeout = setTimeout(() => {\n\t\t\t\tthrottleTimeout = null;\n\t\t\t}, delay);\n\t\t}\n\t};\n};\n\nexport { throttleWithDebounce };\nexport default throttleWithDebounce;\n"," import throttleWithDebounce from '@cipscis/throttle-with-debounce';\n\nconst increment = function (this: HTMLElement, e: MouseEvent) {\n\te.preventDefault();\n\n\tlet el = e.target as HTMLElement;\n\tconst activateCountString = el.getAttribute('data-activate-count');\n\n\tlet activateCount = activateCountString ? parseInt(activateCountString, 10) : 0;\n\n\tactivateCount += 1;\n\n\tel.setAttribute('data-activate-count', activateCount.toString());\n};\n\nconst throttledWithDebounceIncrementFast = throttleWithDebounce(increment, 200);\nconst throttledWithDebounceIncrementSlow = throttleWithDebounce(increment, 1000);\n\ndocument.querySelectorAll<HTMLElement>('.js-throttle-with-debounce-fast').forEach(($el) => $el.addEventListener('click', throttledWithDebounceIncrementFast));\ndocument.querySelectorAll<HTMLElement>('.js-throttle-with-debounce-slow').forEach(($el) => $el.addEventListener('click', throttledWithDebounceIncrementSlow));\n"],"names":["fn","delay","throttleTimeout","debounceTimeout","args","clearTimeout","setTimeout","apply","this","increment","e","preventDefault","el","target","activateCountString","getAttribute","activateCount","parseInt","setAttribute","toString","throttledWithDebounceIncrementFast","throttledWithDebounceIncrementSlow","document","querySelectorAll","forEach","$el","addEventListener"],"sourceRoot":""}